#!/bin/bash

### load boot bash scripts
for f in /usr/local/bin/*.sh; do
	/bin/bash -c $f
done

### create system user for php pool
if [ ! -z ${PHP_USER+x} ] && [ ! -z ${PHP_UID+x} ] && [ ! -z ${PHP_GID+x} ] && [ ! -z ${PHP_HOME+x} ] && [ "$PHP_USER" != "" ] && [ "$PHP_UID" != "" ] && [ "$PHP_GID" != "" ] && [ "$PHP_HOME" != "" ]; then
	echo "env PHP_USER: creating new system user: ${PHP_USER} ${PHP_UID}:${PHP_GID} ${PHP_HOME}"
	groupadd -f $PHP_USER -g $PHP_GID && \
   useradd  -d $PHP_HOME -u $PHP_UID -g $PHP_GID -s /bin/false $PHP_USER
fi

### make sure to create clean php-fpm.conf
### to avoid adding multiple times the same lines next
### in case container is restarting
echo "[global]"                        >  /usr/local/etc/php-fpm.conf
echo "include=etc/php-fpm.d/*.conf"    >> /usr/local/etc/php-fpm.conf
echo "[global]"             > /usr/local/etc/php-fpm.d/zz-docker.conf
echo "daemonize  = yes"    >> /usr/local/etc/php-fpm.d/zz-docker.conf
echo "log_level  = notice" >> /usr/local/etc/php-fpm.d/zz-docker.conf

if [ "${PHP_ERROR_LOG,,}" = "off" ]; then
	echo "env PHP_ERROR_LOG: OFF"
	echo "error_log  = /proc/self/fd/1" >> /usr/local/etc/php-fpm.d/zz-docker.conf
else
	echo "env PHP_ERROR_LOG: ON"
	echo "error_log  = /tmp/stdout.log" >> /usr/local/etc/php-fpm.d/zz-docker.conf
fi

echo "[www]" >> /usr/local/etc/php-fpm.d/zz-docker.conf

if [ "${PHP_ACCESS_LOG,,}" = "on" ]; then
	echo "env PHP_ACCESS_LOG: ON"
	echo "access.log = /tmp/stdout.log" >> /usr/local/etc/php-fpm.d/zz-docker.conf
else
	echo "env PHP_ACCESS_LOG: OFF"
	echo "access.log = /proc/self/fd/1" >> /usr/local/etc/php-fpm.d/zz-docker.conf
fi

if [ "${PHP_ERROR_LOG,,}" = "on" ]; then
	echo "php_admin_value[log_errors]         = On"              >> /usr/local/etc/php-fpm.d/zz-docker.conf
	echo "php_admin_value[error_log]          = /tmp/stdout.log" >> /usr/local/etc/php-fpm.d/zz-docker.conf
	echo "php_admin_value[opcache.error_log]  = /tmp/stdout.log" >> /usr/local/etc/php-fpm.d/zz-docker.conf
fi

# expose /status for health check & stop access log
echo "pm.status_path = /status" >> /usr/local/etc/php-fpm.d/zz-docker.conf
echo "ping.path      = /ping"   >> /usr/local/etc/php-fpm.d/zz-docker.conf
echo "ping.response  = OK"      >> /usr/local/etc/php-fpm.d/zz-docker.conf

echo

### load PHP ini configurations
if [ ! -z ${PHP_INI_PATH+x} ] && [ "$PHP_INI_PATH" != "" ]; then
	printf "env PHP_INI_PATH:\n"
	for f in ${PHP_INI_PATH}; do
		printf " - $f\n";
		rm -f /usr/local/etc/php/conf.d/${f##*/}
		cp $f /usr/local/etc/php/conf.d/
	done
	echo
fi

### remove default www.conf pool
### and load PHP-FPM pool configurations
if [ ! -z ${PHP_POOL_PATH+x} ] && [ "$PHP_POOL_PATH" != "" ]; then
	printf "env PHP_POOL_PATH:\n"
	for f in ${PHP_POOL_PATH}; do
		printf " - $f\n";
		rm -f /usr/local/etc/php-fpm.d/${f##*/}
		cp $f /usr/local/etc/php-fpm.d/
	done
	echo
fi


### load bash scripts
if [ ! -z ${PHP_BOOT_SCRIPTS+x} ] && [ "$PHP_BOOT_SCRIPTS" != "" ]; then
	printf "env PHP_BOOT_SCRIPTS:\n"
	for f in ${PHP_BOOT_SCRIPTS}; do
		printf " - $f\n";

		rm -f /usr/local/bin/${f##*/}
		cp $f /usr/local/bin/

		chmod +x /usr/local/bin/${f##*/}
	done

	echo
	for f in ${PHP_BOOT_SCRIPTS}; do
		/bin/bash -c /usr/local/bin/${f##*/}
	done
fi

### expose php version
echo
/usr/local/bin/php -v
